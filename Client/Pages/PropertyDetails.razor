@page "/property-details/{id:int}"

@inject IHouseService houseService
@inject SweetAlertService swal
@inject NavigationManager navigationManager
@inject IAppointmentService appointmentService
@inject BookingService bookingService
@inject AuthenticationStateProvider authProvider



<section class="py-5">
    <div class="container">
        <div class="row gx-5">
            <aside class="col-lg-6">

                @if (houseResponse != null && !string.IsNullOrEmpty(houseResponse.Image) )
                {
                    <div id="propertyImageCarousel" class="carousel slide border rounded-4 mb-3" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <img src="@houseResponse.Image" class="d-block w-100 rounded-4" alt="Main Image">
                            </div>

                            @if (houseResponse.OtherImages!=null && houseResponse.OtherImages.Any())
                            {
                                @foreach (var image in houseResponse.OtherImages)
                                {
                                    <div class="carousel-item">
                                        <img src="@image" class="d-block w-100 rounded-4" alt="Image 1">
                                    </div>
                                }
                                
                            }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#propertyImageCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#propertyImageCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
                <div class="d-flex justify-content-center mb-3">

                    <button type="button" data-bs-target="#propertyImageCarousel" data-bs-slide-to="0" class="active border-0">
                        <img width="60" height="60" src="@houseResponse.Image" class="rounded-2" />
                    </button>

                    @foreach (var image in houseResponse.OtherImages)
                    {
                        <button type="button" data-bs-target="#propertyImageCarousel" data-bs-slide-to="0" class="active border-0">
                        <img width="60" height="60" src="@image" class="rounded-2" />
                    </button>                        
                    }
                </div>
                }           
            </aside>
            <main class="col-lg-6">
                <div class="ps-lg-3">
                    <h4 class="title text-dark">
                        @houseResponse.Name
                    </h4>
                    <div class="d-flex flex-row my-3">
                        <div class="text-warning mb-1 me-2">
                            <i class="fa fa-star"></i>
                            <i class="fa fa-star"></i>
                            <i class="fa fa-star"></i>
                            <i class="fa fa-star"></i>
                            <i class="fas fa-star-half-alt"></i>
                            <span class="ms-1">4.5</span>
                        </div>
                        <span class="text-muted"><i class="fas fa-shopping-basket fa-sm mx-1"></i>156 Booked</span>
                        <span class="text-success ms-2">Still Open</span>
                    </div>

                    <div class="mb-3">
                        <span class="h5">&#8358;@houseResponse.Price.ToString("N0")</span>
                        <span class="text-muted">@houseResponse.Mode</span>
                    </div>

                    <p>@houseResponse.Description</p>

                    <div class="row">
                        <dt class="col-3">Type:</dt>
                        <dd class="col-9">@houseResponse.TypeofProperty</dd>

                        <dt class="col-3">Bedrooms:</dt>
                        <dd class="col-9">@houseResponse.NumberOfBedroom</dd>

                        <dt class="col-3">Bathrooms:</dt>
                        <dd class="col-9">@houseResponse.NumberOfBathroom</dd>

                        <dt class="col-3">Location:</dt>
                        <dd class="col-9">@houseResponse.Location</dd>
                    </div>

                    <hr />

                    <AuthorizeView Roles="Client">
                        <Authorized>
                            @if (isBooked)
                            {
                                <button type="button" class="btn border ms-1 btn-success" @ disabled>
                                    <i class="bi bi-calendar-check"></i> Booked
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-light border ms-1 border-secondary" @onclick="()=>HandleBooking(houseResponse.Id)" disabled="@isAppointing">
                                    @if (isAppointing)
                                    {
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <i class="bi bi-calendar-check-fill"></i>

                                    }

                                    Book an Appointment
                                </button>
                            }

                        </Authorized>

                        <NotAuthorized>
                            <button type="button" class="btn ms-1 btn-outline-secondary" @onclick="()=>HandleAlternativeBooking()"><i class="bi bi-calendar-check-fill"></i> Book an Appointment</button>

                        </NotAuthorized>
                        
                    </AuthorizeView>

                    
                        
                    
                </div>
            </main>
        </div>
    </div>
</section>


@code {

    HouseResponseDetail houseResponse = new HouseResponseDetail();
    private bool isLoading = false;
    private bool isAppointing = false;
    private Response result;
    private bool isBooked;

    [Parameter]
    public int Id { get; set; }


    protected async override Task OnParametersSetAsync()
    {
        houseResponse = await houseService.GetHouseData(Id);

        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!=null && user.Identity.IsAuthenticated)
        {
            result = await appointmentService.AlreadyBooked(Id);

            if (result.Message == "1")
            {
                isBooked = true;
            }
            else if (result.Message == "0")
            {
                isBooked = false;
            }
        }

      
    }


    private async Task HandleAlternativeBooking()
    {
        navigationManager.NavigateTo("/userlogin");
    }

    private async Task HandleBooking(int id)
    {
        isAppointing = true;

        var answer = await swal.FireAsync(new SweetAlertOptions
        {
                Title = "Are you Sure?",
                Text = "Do you want to book an appointment for this property?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes , book it",
                CancelButtonText = "No ,dont"
        });

        if(answer.IsConfirmed)
        {

            try
            {
                result = await appointmentService.BookAppointment(id);
                if (result.Success)
                {
                    await swal.FireAsync("Booking", "Booking Successful", SweetAlertIcon.Success);
                    bookingService.BookingMessage = result.Message;
                    navigationManager.NavigateTo("/book-confirmation");
                }
                else
                {
                    await swal.FireAsync("Error", $"Error encountered {result.Message}", SweetAlertIcon.Error);

                }
            }
            finally
            {
                isAppointing = false;
            }

        }

        else if(answer.Dismiss ==DismissReason.Cancel)
        {
            await swal.FireAsync("Cancelled", "Your property is safe: ", SweetAlertIcon.Info);
            isAppointing = false;
        }


    }

    // protected override async Task OnInitializedAsync()
    // {
    //     await GetData();
    // }

    // private async Task GetData()
    // {
    //     result = await appointmentService.AlreadyBooked(Id);
    //     if (result.Message == "1")
    //     {
    //         isBooked = true;
    //     }
    //     else if (result.Message == "0")
    //     {
    //         isBooked = false;
    //     }
    // }
}


        

        
    
