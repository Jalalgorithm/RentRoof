@page "/userlogin"
@inject IAccountService accountService
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject SweetAlertService swal



<section class="vh-100" style="background-color: white">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-xl-8">
                <div class="card shadow-sm" style="border-radius: 1rem;">
                    <div class="row g-0">
                        <div class="col-md-5 d-none d-md-block">

                            <img src="loginforuser.png" alt="login form" class="img-fluid" style="border-radius: 1rem 0 0 1rem; height: 100%; object-fit: cover;" />
                        </div>
                        <div class="col-md-7 d-flex align-items-center">
                            <div class="card-body p-3 p-md-5 text-black">

                                <EditForm Model="userLogin" OnValidSubmit="HandleLogin">
                                    <div class="d-flex align-items-center mb-3 pb-1">
                                            <img src="landlord.png" class="ms-3" alt="LandLord Logo" style="width: 150px; height: auto;" />

                                        
                                    </div>

                                    <h5 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Sign into your account</h5>

                                    <div class="form-outline mb-3">
                                        <label class="form-label" for="email">Email address</label>
                                        <InputText id="email" class="form-control" @bind-Value="userLogin.Email" />
                                    </div>

                                    <div class="form-outline mb-3">
                                        <label class="form-label" for="password">Password</label>
                                        <InputText id="password" class="form-control" @bind-Value="userLogin.Password" type="password" />
                                    </div>

                                    <div class="mb-3">
                                        <button class="btn btn-dark btn-block" type="submit" disabled="@isLoading">
                                            @if (isLoading)
                                            {
                                                <div class="spinner-border" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <span>Login</span>
                                            }
                                        </button>
                                    </div>

                                    <a class="small text-muted" href="#">Forgot password?</a>
                                    <p class="mb-2" style="color: #393f81;">Don't have an account? <a href="user-registration" style="color: #393f81;">Register here</a></p>
                                    <a href="#!" class="small text-muted">Terms of use.</a>
                                    <a href="#!" class="small text-muted">Privacy policy</a>

                                </EditForm>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@code {
    UserLoginDTO userLogin = new();
    private bool isLoading = false;
    public Response result;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public async Task HandleLogin()
    {

        isLoading = true;

        try
        {
            result = await accountService.Login(userLogin);

        }
        finally
        {
            isLoading = false;
        }
        if (result.Success)
        {
            await swal.FireAsync("Welcome", "You are logged in", SweetAlertIcon.Success);
            var token = result.Message;
            await localStorage.SetItemAsync("token", token);
            await authStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");

        }
        else
        {
            await swal.FireAsync("Error", result.Message, SweetAlertIcon.Error);
        }
        
        

    }


}
